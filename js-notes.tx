The Interactive Web
===================
Events are used to respond to web page happenings with JavaScript code.
The onload event is triggered when a page finishes loading.
You respond to the onload event by setting the onload attribute of the <body> tag.
Functions allow you to bundle JavaScript code into reusable modules.
Some functions require you to pass them information to complete their task.
The alert() function is a built‑in JavaScript function that displays a text message in a small pop‑up window.

Storing Data
=============
Script data can usually be represented by one of the three basic data types: text, number, or boolean.
A variable is a piece of data that can change over the course of a script.
A constant is a piece of information that cannot change.
The var keyword is used to create variables, while const is used to create constants.
The data type of a piece of JavaScript data is established when you set the data to a certain value, and for variables the type can change.

Although not a strict JavaScript requirement, it’s a good coding convention to name constants in ALL UPPERCASE and variables in lowerCamelCase.
Always initialize constants when you create them, and initialize variables whenever possible.
When a variable isn’t initialized, it remains undefined until a value is eventually assigned to it.
NaN stands for Not a Number, and is used to indicate that a piece of data is not a number when the expectation is that it should be.
String concatenation is very different from mathematical addition, even though both use the familiar plus sign (+).
The built-in parseInt() and parseFloat() functions are used to convert strings to numbers.

Exploring the Client
=====================
The setTimeout() function allows you to create a one-shot timer that triggers JavaScript code after a period of time has elapsed.
To set a timer that repeats at a certain interval, use setInterval(), which will create an interval timer.
Always specify timer durations in milliseconds, which are thousandths of a second.
Web page elements have a style object you use to set style properties, such as width and height.
The client window is the part of the browser window that displays the web page and nothing else.
You can access the width and height of the client window using the body.clientWidth and body.clientHeight properties of the document object.

A cookie is a piece of text data stored by the browser on the user’s computer.
Cookies allow scripts to store data that survives beyond a single web session.
Every cookie has an expiration date, after which the cookie is destroyed by the browser.
Moving script code to an external file is a handy way to make the code more reusable and maintainable.
Cookies can’t access a user’s hard disk or spread viruses, but they are capable of storing personal data that has been entered in web pages.

Decision Making
===============
Use the if statement to conditionally run a single piece of JavaScript code.
The test condition in an if statement must always result in true or false.
Use the if/else statement to conditionally run one of two different pieces of JavaScript code.
Use a compound statement to run multiple pieces of JavaScript code in place of a single piece of code.
Create a compound statement by surrounding multiple individual statements with curly braces ({}).
Compound statements allow the action parts of if and if/else statements to do more than one thing.

Comments are a great way to remind yourself of code to add later.
Don’t be afraid to use lots of comments to document your code so that it’s easier to understand.
Use a pair of forward slashes (//) to start a single-line comment.
Multiline comments start with /* and end with */.
Global variables are created at the script level, outside of any function or other body of code, and are kept around for the life of the script.
Local variables are created (and destroyed) inside a body of code, and can only be accessed within that code.
Local variables are preferred over global variables because their access is more tightly controlled.

Looping
=======
for loops repeat a piece of JavaScript code a specific number of times.
The increment (++) and decrement (-- ) operators provide a handy way to update loop counters.
An array allows you to store multiple pieces of data in a single place.
Although an array holds multiple pieces of information, it has a single variable name.
Indexed arrays are accessed using numeric keys called indexes.
Indexed arrays work great with loops because they allow you to use a loop counter to loop through array data.

The break statement immediately breaks out of a loop, skipping any remaining loop code.
Boolean logic operators allow you to create powerful true/false logic for making decisions.
The while loop runs a piece of code as long as a certain test condition remains true.
Avoid an infinite loop by making sure the test condition is somehow affected by code within the while loop.

Two-dimensional arrays allow you to store rows and columns of data in tabular structures.
When accessing an individual piece of data in a 2-D array, you must specify both the row and column of the index.
Nested loops can be used to iterate through the data in a 2-D array.
Just like normal arrays, 2-D arrays can be created and initialized from array object literals

Functions
=========
Functions allow you to turn big problems into small problems, which become much easier to solve.
Functions provide a mechanism to separate script tasks and then complete them with reusable chunks of code.
Functions serve as a great way to eliminate duplicate code since the code in a function can be reused as many times as you want.
Arguments allow you to pass data into functions as input for a given task.

The return statement allows functions to return data back to the code that called them.
When a piece of data is returned from a function, it stands in for the code that called the function.
A function can only return a single piece of data.
The return statement can be used without any data to simply end a function early.

Callback functions are called by the browser in response to things that take place outside of the script.
Function references can be used to assign functions as if they were variables.
Function references let you wire event handler functions in JavaScript code without altering HTML code.
Function literals are nameless functions that are handy in situations when a named function isn’t necessary.

Forms and Validation
====================

(onfocus) - The onfocus event is fired when a field first gets selected for input.
(onblur)- The onblur event is fired when a field loses input selection.
(onchange) - The onchange event is similar to onblur except that it only gets triggered if the field
loses input selection and its contents have been changed.

<input id="phone" name="phone" type="text" size="12"
onblur="validateNonEmpty(this, document.getElementById('phone_help'));" />
<span id="phone_help" class="help"></span>

Every form field is accessible as a JavaScript object.
Within a form field object there is a property called form that represents the entire form as an array of fields.
The onblur event is fired when the input focus leaves a form field, and is a great way to trigger a data validation function.
Alert boxes are a very clunky and often annoying way of notifying users of data validation problems.
A passive approach to validation help is much more intuitive and less of a hassle for users.
The length property of a string reveals the number of characters in the string.

A regular expression matches a pattern of text in a string, and is enclosed within forward slashes.
In addition to normal text, regular expressions are built out of metacharacters and quantifiers, which provide careful control over how a text pattern is matched.
In JavaScript, regular expressions are supported by the built-in RegExp object, but it is rarely seen because regular expressions are typically created as literals.
The test() method in the RegExp object is used to a test a regular expression pattern on a string of text.

Reg Expressions
Standard date (MM/DD/YYYY) - /^\d{2}\/\d{2}\/(\d{2}|\d{4})$/
Phone Number (XXX-XXX-XXXX) - /^\d{3}\-\d{3}\-\d{4}$/
Email Address (abc123@example.com) - /^[\w\.-_\+]+@[\w-]+(\.\w{2,3})+$/

Wrangling the Page (Document Object Model - DOM)
================================================

Using getElementById(): document.getElementById(“orange“)
Using getElementsByTagName(): document.getElementsByTagName(“img“)[3]

Although not a web standard, the innerHTML property provides access to all of the content stored in an element.
The Document Object Model, or DOM, provides a standardized mechanism of accessing and modifying web page data.
The DOM looks at a web page like a hierarchical tree of related nodes.
The DOM alternative to changing web page content with innerHTML involves removing all of the child nodes of an element, and then creating and appending a new child node that contains the new content.

The className node property makes big style changes by changing the entire style class of a node.
The style node property makes small style changes by providing access to individual style properties of a node.
A CSS style class has nothing to do with a JavaScript class—they are completely different things.
Elements on a page can be dynamically shown or hidden using the visibility style property of the element object.

Any HTML element can be created using the document object’s createElement() method.
To add text content to an element, a child text node must be created and appended to the element.
By carefully adding and removing nodes in the DOM tree, a web page can be disassembled and reassembled at will.

Bringing Data to Life (Objects)
===============================

Objects are a special kind of data structure that combine data with code that acts on the data.
In practical terms, an object is really just variables and functions combined into a single structure.
When placed into an object, variables become known as properties, while functions become known as methods.
Properties and methods are referenced by supplying the name of the object followed by a dot followed by the name of the property or method.

The standard JavaScript Date objects represents an instant in time, expressed in milliseconds.
The Date object includes several methods for accessing the different pieces and parts of a date and time.
The Date object is smart enough to know how to manipulate dates mathematically, as well as compare dates to each other.
Like most objects other than String, you create a Date object using the new operator.

The toString() method is used to convert any object to a text representation.
Arrays and strings are both really just objects, relying on the standard Array and String objects in JavaScript for their methods and data storage.
The sort() method of the Array object can be used to sort an array in any order you want.
The indexOf() method in the String object searches for a string of text within another string, returning the index of the search string location.

Creating Custom Objects (objects)
=================================

A class is a description of an object, while an instance is an actual object that has been created based upon that description.
A class lays out the properties and methods of an object, while an instance places real data in the properties, giving the methods something to work with.
The this keyword is used to access an instance from within its own code.
The prototype object allows methods to be stored in a class, preventing instances from unnecessarily duplicating code.

Kill Bugs Dead (Debugging)
==========================

Although most browsers provide an error console that provides information about JavaScript errors, they can’t always be trusted as completely accurate.
Even though browsers often yield sketchy error information, they do usually provide valuable clues about where to start looking for trouble.
Curly braces around blocks of code are a common source of bugs—be careful to always match opening and closing braces.
Simple typographical errors are easy to make but not necessarily easy to find—always check the naming of identifiers.

Syntax errors involve code that violates JavaScript language rules, and are usually caught by the JavaScript interpreter.
Strings must be carefully enclosed within matching quotes or apostrophes.
Quotes and apostrophes should be mixed (but still in matching pairs) in HTML event handler attributes that contain JavaScript code.
Alert boxes offer a primitive but useful option for watching variables throughout a script.
It’s a common error to accidentally code a test condition with = when you really mean ==.

Make sure parentheses are always matched in pairs.
Make sure curly braces around blocks of code are always matched in pairs - careful indentation of code helps in matching pairs of curly braces.
Try hard to avoid typos in identifier names—both variables and functions can cause big problems if their names aren’t used consistently.
Be consistent with the use of quotes and apostrophes, and carefully mix the two in HTML attributes if necessary.
Use escape characters to code characters that have a special meaning in strings, such as a quote (\”) or an apostrophe (\’).
Never, ever, ever use = when you mean ==. JavaScript probably won’t see it as an error but your code will not work as intended.
Make sure an object has been created before attempting to access it—this primarily applies to web page elements, which aren’t created until just before the onload event is triggered.
Don’t ever name local variables and global variables the same thing because the local variable will shadow the global one, resulting in some very unpredictable behavior.

Dynamic Data (AJAX and XML)
===========================

The XMLHttpRequest object is the standard object for carrying out Ajax requests but it can be somewhat messy to use.
The custom AjaxRequest object serves as a convenient way to use Ajax without having to deal directly with XMLHttpRequest.
Ajax requests always fall into one of two types, GET or POST, which is determined by the data being sent to the server, as well as how the data affects the server.
The send() method of the AjaxRequest object